// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CS_GPUCulling

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#define THREAD_GROUP_SIZE_X 128 
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

struct AABBData
{
    float3 boundsCenter;
    float3 boundsExtents;
    // float4x4 objectTransformMatrix;
};

uint _TotalInstances;
float4x4 _CameraFrustrumMatrix;

StructuredBuffer<AABBData> _InstanceAABBs;
AppendStructuredBuffer<uint> _VisibleInstances;

inline uint IsCameraOutsideObjBounds(float3 pos, float3 minPos, float3 maxPos)
{
    float boundsSize = distance(maxPos, minPos);
    return((distance(pos, maxPos) > boundsSize)
    + (distance(pos, minPos) > boundsSize));
}

inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return(clipPos.z > clipPos.w
    || clipPos.x < - clipPos.w
    || clipPos.x > clipPos.w
    || clipPos.y < - clipPos.w
    || clipPos.y > clipPos.w)
    ? 0: 1;
}

[numthreads(THREAD_GROUP_SIZE_X,THREAD_GROUP_SIZE_Y,THREAD_GROUP_SIZE_Z)]
inline void CS_GPUCulling (uint3 id : SV_DispatchThreadID)
{

    // uint index = id.x + (id.y * _ThreadDimensionX);
    uint index = id.x;
    
    if (index >= _TotalInstances)
    {
        return;
    }
    
    // Get the instance AABBData
    AABBData instance = _InstanceAABBs[index];
    
    // Check if the instance is visible
    float3 minPos = instance.boundsCenter - instance.boundsExtents;
    float3 maxPos = instance.boundsCenter + instance.boundsExtents;
    
    float4 boxCorners[8];
    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);
    
    float4 clipPos = mul(_CameraFrustrumMatrix, boxCorners[0]);
    uint isInFrustum = IsVisibleAfterFrustumCulling(clipPos);
    
    clipPos.xyz = clipPos.xyz / clipPos.w;
    
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPos = mul(_CameraFrustrumMatrix, boxCorners[i]);
        
        // For Frustum
        isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPos));
    }
    // Set Frustum Result
    if(isInFrustum == 1)
    // if (instance.boundsCenter.x > 5) 
    {
        
        _VisibleInstances.Append(index);
    }
}
